#include <iostream>
#include <time.h>
#include <string>

using namespace std;

//проверка строки на то состоит она только из цифр или нет и есть ли там нули
bool isValidNumber(const std::string& str) {
    for (char c : str) {
        if (!isdigit(c)) return false; // Проверка, что символ - цифра
    }
    return true;
}

std::pair<int, int> parseAndValidate(const std::string& input, int max) {
    size_t spacePos = input.find(' ');
    if (spacePos == std::string::npos) return { -1, -1 }; // Нет пробела
    std::string first = input.substr(0, spacePos);
    std::string second = input.substr(spacePos + 1);

    if (isValidNumber(first) && isValidNumber(second)) {
        int num1 = std::stoi(first);
        int num2 = std::stoi(second);
        if (num1 > 0 && num2 > 0 && num1 <= max && num2 <= max) {
            return { num1, num2 }; // Возвращаем пару чисел
        }
    }
    return { -1, -1 }; // Неверный формат
}

void Func(int k0, int k1, int ar[20][20], string s[20][20], int rows, int cols) {
    int d = 0; //счётчик мин
    //по вертикали 3 клетки
    for (int i = k0 - 1; i < k0 + 2; i++)
    {
        //по горизонтали 3 клетки
        for (int j = k1 - 1; j < k1 + 2; j++)
        {
            //не выходим за пределы поля 9 на 9
            if ((i > -1) and (i < rows) and (j > -1) and (j < cols))
            {
                //считаем только пустые клетки в которых может быть мина
                if ((s[i][j] == "[]") or (s[i][j] == "[!]"))
                {
                    //если какая-то из соседних клеток больше 0(мина)
                    if (ar[i][j] >= 0)
                    {
                        //увеличиваем счётчик мин
                        d++;
                    }
                }
            }
        }
    }
    //заполняем клетку исходя из кол-ва мин рядом
    s[k0][k1] = "[" + to_string(d) + "]";
    //если мин нет, то открываем все соседние клетки
    if (d == 0)
    {
        //по вертикали 3 клетки
        for (int i = k0 - 1; i < k0 + 2; i++)
        {
            //по горизонтали 3 клетки
            for (int j = k1 - 1; j < k1 + 2; j++)
            {
                //не выходим за пределы поля 9 на 9
                if ((i > -1) and (i < rows) and (j > -1) and (j < cols))
                {
                    //считаем только пустые клетки в которых может быть мина
                    if ((s[i][j] == "[]") or (s[i][j] == "[!]"))
                    {
                        //ищем мины для каждой клетки вокруг
                        Func(i, j, ar, s, rows, cols);
                    }
                }
            }
        }
        //обнуляем счётчик мин
        d = 0;
    }
    //если мины есть, завершаем работу программы
    else 
    {
        return;
    }
}
void GenerateМatrix(int n0, int n1, int ROW, int COL, int arr[20][20], int mc_pobeda) {
    bool del = true;
    arr[n0][n1] = -1;
    for (int i = 0; i < ROW; i++)
    {
        //проходимся по матрице по горизонтали
        for (int j = 0; j < COL; j++)
        {
            if ((i == n0) and (j == n1)) {
                continue;
            }
            //записываем в матрицу с цифрами рандомное число
            arr[i][j] = rand() % (ROW * COL) - ((ROW * COL) - mc_pobeda);
            //обновление
            for (int k = 0; k < ROW; k++)
            {
                for (int g = 0; g < COL; g++)
                {

                    if ((i == k) and (j == g))
                    {
                        del = false;
                        break;
                    }
                    else if ((i == k) and (j + 1 == g))
                    {
                        del = false;
                        break;
                    }
                    else
                    {
                        if (arr[i][j] == arr[k][g])
                        {
                            del = false;
                            if (j == 0)
                            {
                                j = COL - 1;
                                i = i - 1;
                            }
                            else
                            {
                                j = j - 1;
                            }
                            break;
                        }
                    }
                }

                if (del == false)
                {
                    del = true;
                    break;
                }
            }
        }
    }
}


int main()
{
	//setlocale(LC_ALL, "rus");
    bool start = true;
	string otvet; //ввод пользователя
    int ROW;
    int COL;
    string pole;
    bool bool_mc; //буловая перменная, которая проверяет, что все мины отмечены, а поля открыты
    string chose; //выбор действия пользователем(в самой игре)
    string n; //номер элемента, который вводит пользователь
    int n0; //первый символ элемента в виде числа
    int n1; //второй символ элемента в виде числа
    int mc = 0; //счетчик для мин
    int mc_pobeda;
    bool mina = false; //буловая переменная, которая меняется на true, если пользователь наткнулся на мину
    int arr[20][20]; //массив с циферками, который не видит пользователь
    string saper[20][20]; //массив с пустыми полями, который видит пользователь
	srand(time(NULL)); //для рандомной генерации чисел
	while (true) //цикл для генерации чисел
	{
        //меню в начле игры
		cout << "|---------------|" << endl;
		cout << "|Сыграем в игру?|" << endl;
		cout << "|1. Да          |" << endl;
		cout << "|2. Нет         |" << endl;
		cout << "|---------------|" << endl;
        cin >> otvet;
		if (otvet == "1")
		{
            while (true) {
                cout << "|--------------------|" << endl;
                cout << "|Выберите размер поля|" << endl;
                cout << "|1. 9x9 - 10 мин     |" << endl;
                cout << "|2. 16x16 - 40 мин   |" << endl;
                cout << "|3. 20x20 - 60 мин   |" << endl;
                cout << "|--------------------|" << endl;
                cin >> pole;
                if (pole == "1") {
                    mc_pobeda = 10;
                    ROW = 9;
                    COL = ROW;
                    break;
                }
                else if (pole == "2") {
                    mc_pobeda = 40;
                    ROW = 16;
                    COL = ROW;
                    break;
                }
                else if (pole == "3") {
                    mc_pobeda = 60;
                    ROW = 20;
                    COL = ROW;
                    break;
                }
                else {
                    cout << "Попробуй ещё раз!" << endl;
                }
            }
            
            cout << "\t";
            for (int i = 1; i < ROW + 1; i++)
            {
                cout << i << "\t";
            }
            cout << endl;

            for (int i = 0; i < ROW; ++i)
            {
                cout << i + 1 << "\t";
                for (int j = 0; j < COL; ++j)
                {
                    saper[i][j] = "[]";
                    cout << saper[i][j] << "\t";
                }
                cout << endl;
            }

        

            while (true)
            {
                mc = 0;
                bool_mc = true;
                cout << "|-----------------|" << endl;
                cout << "|Выберите действие|" << endl;
                cout << "|1. Вскопать      |" << endl;
                cout << "|2. Флажок        |" << endl;
                cout << "|-----------------|" << endl;
                cin >> chose;
                if (chose == "1")
                {
                    cout << "Введите номер элемента" << endl;
                    cin.ignore();
                    getline(cin, n);
                    auto result = parseAndValidate(n, ROW);
                    if (result.first != -1)
                    {
                        n0 = result.first;
                        n1 = result.second;
                        n0--;
                        n1--;
                        if (start == true) {
                            GenerateМatrix(n0, n1, ROW, COL, arr, mc_pobeda);
                            start = false;
                        }
                        if (arr[n0][n1] >= 0)
                        {
                            cout << "Мина!" << endl;
                            saper[n0][n1] = "[*]";
                            mina = true;
                        }
                        else
                        {
                            Func(n0, n1, arr, saper, ROW, COL);
                        }
                    }
                    else
                    {
                        cout << "Попробуй ещё раз!" << endl;
                    }
                }
                else if (chose == "2")
                {
                    cout << "Введите номер элемента" << endl;
                    cin.ignore();
                    getline(cin, n);
                    auto result = parseAndValidate(n, ROW);
                    if (result.first != -1)
                    {
                        n0 = result.first;
                        n1 = result.second;
                        saper[n0-1][n1-1] = "[!]";
                    }
                    else
                    {
                        cout << "Попробуй ещё раз!" << endl;
                    }

                }
                else
                {
                    cout << "Попробуй ещё раз!" << endl;
                }

                for (int i = 0; i < ROW; i++)
                {
                    for (int j = 0; j < COL; j++)
                    {
                        if (saper[i][j] == "[!]")
                        {
                            mc++;
                        }
                    }
                }

                cout << "Осталось мин: " << 10 - mc << endl;
                cout << "\t";

                for (int i = 1; i < ROW + 1; i++)
                {
                    cout << i << "\t";
                }

                cout << endl;

                for (int i = 0; i < ROW; ++i) 
                {
                    cout << i + 1 << "\t";
                    for (int j = 0; j < COL; ++j) 
                    {
                        cout << saper[i][j] << "\t";
                    }
                    cout << endl;
                }

                if (mina == true)
                {
                    start = true;
                    mina = false;
                    break;
                }

                if (mc == mc_pobeda)
                {
                    for (int i = 0; i < ROW; i++)
                    {
                        for (int j = 0; j < COL; j++)
                        {
                            if (saper[i][j] == "[]")
                            {
                                bool_mc = false;
                            }
                        }
                    }
                    if (bool_mc == true)
                    {
                        cout << "ПОБЕДА!!!" << endl;
                        start = true;
                        break;
                    }
                }

            }
		}
		else if (otvet == "2")
		{
			cout << "((((" << endl;
			break;
		}
		else
		{
			cout << "Попробуй ещё раз!" << endl;
		}
	}
}
